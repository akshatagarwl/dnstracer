// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type BpfDnsEvent struct {
	_         structs.HostLayout
	Header    BpfTraceEventHeader
	IpVersion BpfIpVersion
	Addr      struct {
		_    structs.HostLayout
		Ipv4 struct {
			_     structs.HostLayout
			Saddr uint32
			Daddr uint32
		}
		_ [24]byte
	}
	Sport   uint16
	Dport   uint16
	DnsLen  uint16
	DnsData [512]uint8
	_       [6]byte
}

type BpfEventType uint32

const (
	BpfEventTypeEVENT_TYPE_DNS_QUERY    BpfEventType = 1
	BpfEventTypeEVENT_TYPE_DNS_RESPONSE BpfEventType = 2
)

type BpfIpVersion uint32

const (
	BpfIpVersionIP_VERSION_IPV4 BpfIpVersion = 4
	BpfIpVersionIP_VERSION_IPV6 BpfIpVersion = 6
)

type BpfTraceEventHeader struct {
	_         structs.HostLayout
	Type      BpfEventType
	_         [4]byte
	Timestamp uint64
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
	BpfVariableSpecs
}

// BpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	DnsPacketParser *ebpf.ProgramSpec `ebpf:"dns_packet_parser"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	DnsHeap *ebpf.MapSpec `ebpf:"dns_heap"`
	Events  *ebpf.MapSpec `ebpf:"events"`
}

// BpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfVariableSpecs struct {
	UnusedDns *ebpf.VariableSpec `ebpf:"unused_dns"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
	BpfVariables
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	DnsHeap *ebpf.Map `ebpf:"dns_heap"`
	Events  *ebpf.Map `ebpf:"events"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.DnsHeap,
		m.Events,
	)
}

// BpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfVariables struct {
	UnusedDns *ebpf.Variable `ebpf:"unused_dns"`
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	DnsPacketParser *ebpf.Program `ebpf:"dns_packet_parser"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.DnsPacketParser,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
